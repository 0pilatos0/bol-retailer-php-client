<?php

namespace Picqer\BolRetailerV4;

// This class is auto generated by OpenApi\ClientGenerator
class Client extends BaseClient
{

    /**
     * Gets a paginated list of all open orders sorted by date in descending order.
     * @param int page The requested page number with a page size of 50 items.
     * @param string fulfilmentMethod The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).
     * @return Model\ReducedOrders
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\UnauthorizedException when request was unauthorized.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOrders(int $page = 1, string $fulfilmentMethod = 'FBR'): Model\ReducedOrders
    {
        $url = "orders";
        $options = [
            'query' => [
                'page' => $page,
                'fulfilment-method' => $fulfilmentMethod,
            ],
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responses = [
            '200' => 'ReducedOrders',
        ];

        return $this->request('GET', $url, $options, $responses);
    }

    /**
     * Creates a new offer, and adds it to the catalog. After creation, status information can be retrieved to review if the offer is valid and published to the shop.
     * @param Model\CreateOfferRequest createOfferRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\UnauthorizedException when request was unauthorized.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postOffer(Model\CreateOfferRequest $createOfferRequest): Model\ProcessStatus
    {
        $url = "offers";
        $options = [
            'body' => $createOfferRequest,
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responses = [
            '202' => 'ProcessStatus',
        ];

        return $this->request('POST', $url, $options, $responses);
    }

    /**
     * Gets an open order by order id.
     * @param string orderId
     * @return Model\Order|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\UnauthorizedException when request was unauthorized.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOrder(string $orderId): ?Model\Order
    {
        $url = "orders/${orderId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+json',
        ];
        $responses = [
            '200' => 'Order',
            '404' => null,
        ];

        return $this->request('GET', $url, $options, $responses);
    }

    /**
     * Gets a shipping label by shipping label id.
     * @param string shippingLabelId
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\UnauthorizedException when request was unauthorized.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getShippingLabel(string $shippingLabelId): ?string
    {
        $url = "shipping-labels/${shippingLabelId}";
        $options = [
            'produces' => 'application/vnd.retailer.v4+pdf',
        ];
        $responses = [
            '200' => 'string',
            '404' => null,
        ];

        return $this->request('GET', $url, $options, $responses);
    }
}
