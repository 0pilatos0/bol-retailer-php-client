<?php


namespace Picqer\BolRetailerV4\OpenApi;


class ClientGenerator
{
    protected $specs;

    protected static $paramTypeMapping = [
        'array' => 'array',
        'string' => 'string',
        'boolean' => 'bool',
        'integer' => 'int',
        'float' => 'float',
        'number' => 'float'
    ];

    public function __construct()
    {
        $this->specs = json_decode(file_get_contents(__DIR__ . '/apispec.json'), true);
    }

    public function generateClient()
    {
        $code = [];
        $code[] = '<?php';
        $code[] = '';
        $code[] = sprintf('namespace %s;', $this->getClientNamespace());
        $code[] = '';
        $code[] = '// This class is auto generated by OpenApi\ClientGenerator';
        $code[] = 'class Client extends BaseClient';
        $code[] = '{';
        $this->generateMethod('/retailer/orders', 'get', $code);
        $code[] = '}';
        $code[] = '';

        //echo implode("\n", $code);

        file_put_contents(__DIR__ . '/../Client.php', implode("\n", $code));
    }

    protected function generateMethod(string $path, string $httpMethod, array &$code): void
    {
        $methodDefinition = $this->specs['paths'][$path][$httpMethod];

        $methodName = $this->kebabCaseToCamelCase($methodDefinition['operationId']);
        $arguments = $this->getArguments($methodDefinition['parameters']);
        $returnType = $this->getReturnType($methodDefinition['responses']);

        $code[] = '';
        $code[] = '    /**';
        // TODO break at 120 chars
        $code[] = '     * ' . $methodDefinition['description'];
        $this->addParamsPhpDoc($methodDefinition['parameters'], $code);
        $code[] = sprintf('     * @return Model\%s', $returnType);
        $code[] = '     * @throws Exception\ConnectException when an error occurred in the HTTP connection.';
        $code[] = '     * @throws Exception\UnauthorizedException when request was unauthorized.';
        $code[] = '     * @throws Exception\Exception when something unexpected went wrong.';
        $code[] = '     */';
        $code[] = sprintf('    public function %s(%s): Model\%s', $methodName, $arguments, $returnType);
        $code[] = '    {';
        $this->addRequestParams($methodDefinition['parameters'], 'query', $code);
        $code[] = '';
        $code[] = sprintf(
            '        return $this->request(\'%s\', \'%s\', [ \'query\' => $query ], \'%s\');',
            strtoupper($httpMethod),
            $this->shortPath($path),
            $returnType
        );
        $code[] = '    }';

        print_r($methodDefinition);
    }

    protected function getType(string $ref): string
    {
        //strip #/definitions/
        return substr($ref, strrpos($ref, '/') + 1);
    }

    protected function getClientNamespace()
    {
        return substr(__NAMESPACE__, 0, strrpos(__NAMESPACE__, '\\'));
    }

    protected function addParamsPhpDoc(array $parameters, array &$code): void
    {
        // TODO break at 120 chars
        foreach ($parameters as $parameter) {
            $code[] = sprintf(
                '     * @param %s %s %s',
                static::$paramTypeMapping[$parameter['type']],
                $this->kebabCaseToCamelCase($parameter['name']),
                $parameter['description']
            );
        }
    }

    protected function kebabCaseToCamelCase($name): string
    {
        $nameElems = explode('-', $name);
        for ($i=1; $i<count($nameElems); $i++) {
            $nameElems[$i] = ucfirst($nameElems[$i]);
        }
        return implode('', $nameElems);
    }

    protected function getArguments(array $parameters): string
    {
        $arguments = [];

        foreach ($parameters as $parameter) {
            $type = static::$paramTypeMapping[$parameter['type']];

            $argument = $type . ' $' . $this->kebabCaseToCamelCase($parameter['name']);
            if (isset($parameter['default'])) {
                if ($parameter['type'] == 'string') {
                    $argument = sprintf('%s = \'%s\'', $argument, $parameter['default']);
                } else {
                    $argument = sprintf('%s = %s', $argument, $parameter['default']);
                }
            }
            $arguments[] = $argument;
        }

        return implode(', ', $arguments);
    }

    protected function addRequestParams(array $parameters, $in, array &$code): void
    {
        $code[] = sprintf("        $%s = [", $in);

        foreach ($parameters as $parameter) {
            if ($parameter['in'] != $in) {
                continue;
            }
            $code[] = sprintf(
                '            \'%s\' => $%s,',
                $parameter['name'],
                $this->kebabCaseToCamelCase($parameter['name'])
            );
        }
        $code[] = '        ];';
    }

    protected function getReturnType(array $responses): string
    {
        if (isset($responses['200'])) {
            $ref = $responses['200']['schema']['$ref'];
        } elseif (isset($responses['202'])) {
            $ref = $responses['202']['schema']['$ref'];
        } else {
            throw new \Exception('Could not fit responseType');
        }

        return $this->getType($ref);
    }

    protected function shortPath($path): string
    {
        return substr($path, strlen('/retailer/'));
    }
}
