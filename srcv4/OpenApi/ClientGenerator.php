<?php


namespace Picqer\BolRetailerV4\OpenApi;

class ClientGenerator
{
    protected $specs;

    protected static $paramTypeMapping = [
        'array' => 'array',
        'string' => 'string',
        'boolean' => 'bool',
        'integer' => 'int',
        'float' => 'float',
        'number' => 'float'
    ];

    public function __construct()
    {
        $this->specs = json_decode(file_get_contents(__DIR__ . '/apispec.json'), true);
    }

    public function generateClient()
    {
        $code = [];
        $code[] = '<?php';
        $code[] = '';
        $code[] = sprintf('namespace %s;', $this->getClientNamespace());
        $code[] = '';
        $code[] = '// This class is auto generated by OpenApi\ClientGenerator';
        $code[] = 'class Client extends BaseClient';
        $code[] = '{';
        $this->generateMethod('/retailer/orders', 'get', $code);
        $this->generateMethod('/retailer/offers', 'post', $code);
        $code[] = '}';
        $code[] = '';

        echo implode("\n", $code);

        file_put_contents(__DIR__ . '/../Client.php', implode("\n", $code));
    }

    protected function generateMethod(string $path, string $httpMethod, array &$code): void
    {
        $methodDefinition = $this->specs['paths'][$path][$httpMethod];

        $methodName = $this->kebabCaseToCamelCase($methodDefinition['operationId']);
        $arguments = $this->extractArguments($methodDefinition['parameters']);
        $returnType = $this->getReturnType($methodDefinition['responses']);

        $argumentsList = $this->getArgumentsList($arguments);

        $code[] = '';
        $code[] = '    /**';
        // TODO break at 120 chars
        $code[] = '     * ' . $methodDefinition['description'];
        $this->addParamsPhpDoc($arguments, $code);
        $code[] = sprintf('     * @return Model\%s', $returnType);
        $code[] = '     * @throws Exception\ConnectException when an error occurred in the HTTP connection.';
        $code[] = '     * @throws Exception\UnauthorizedException when request was unauthorized.';
        $code[] = '     * @throws Exception\Exception when something unexpected went wrong.';
        $code[] = '     */';
        $code[] = sprintf('    public function %s(%s): Model\%s', $methodName, $argumentsList, $returnType);
        $code[] = '    {';
        $code[] = '        $options = [';
        $this->addQueryParams($arguments, $code);
        $this->addBodyParam($arguments, $code);
        $code[] = '        ];';
        $code[] = '';
        $code[] = sprintf(
            '        return $this->request(\'%s\', \'%s\', $options, \'%s\');',
            strtoupper($httpMethod),
            $this->shortPath($path),
            $returnType
        );
        $code[] = '    }';

        print_r($methodDefinition);
    }

    protected function getType(string $ref): string
    {
        //strip #/definitions/
        return substr($ref, strrpos($ref, '/') + 1);
    }

    protected function getClientNamespace()
    {
        return substr(__NAMESPACE__, 0, strrpos(__NAMESPACE__, '\\'));
    }

    protected function addParamsPhpDoc(array $arguments, array &$code): void
    {
        // TODO break at 120 chars
        foreach ($arguments as $argument) {
            if (empty($argument['description'])) {
                $code[] = sprintf(
                    '     * @param %s %s',
                    $argument['type'],
                    $argument['name']
                );
            } else {
                $code[] = sprintf(
                    '     * @param %s %s %s',
                    $argument['type'],
                    $argument['name'],
                    $argument['description']
                );
            }
        }
    }

    protected function kebabCaseToCamelCase($name): string
    {
        $nameElems = explode('-', $name);
        for ($i=1; $i<count($nameElems); $i++) {
            $nameElems[$i] = ucfirst($nameElems[$i]);
        }
        return implode('', $nameElems);
    }

    protected function extractArguments(array $parameters): array
    {
        $argsWithoutDefault = [];
        $argsWithDefault = [];

        foreach ($parameters as $parameter) {
            $argument = [
                'default' => null,
                'description' => null,
                'in' => $parameter['in'],
                'paramName' => null
            ];

            if ($parameter['in'] == 'body') {
                $type = $this->getType($parameter['schema']['$ref']);
                $argument['type'] = 'Model\\' . $type;
                $argument['name'] = lcfirst($type);
            } else {
                $argument['type'] = static::$paramTypeMapping[$parameter['type']];
                $argument['name'] = $this->kebabCaseToCamelCase($parameter['name']);
                $argument['paramName'] = $parameter['name'];
                if (isset($parameter['default'])) {
                    if ($parameter['type'] == 'string') {
                        $argument['default'] = sprintf('\'%s\'', $parameter['default']);
                    } else {
                        $argument['default'] = $parameter['default'];
                    }
                    $argument['description'] = $parameter['description'];
                }
            }

            if ($argument['default'] !== null) {
                $argsWithDefault[] = $argument;
            } else {
                $argsWithoutDefault[] = $argument;
            }
        }

        return array_merge($argsWithoutDefault, $argsWithDefault);
    }

    protected function getArgumentsList(array $arguments): string
    {
        $argumentsList = [];

        foreach ($arguments as $argument) {
            if ($argument['default'] !== null) {
                $argumentsList[] = sprintf('%s $%s = %s', $argument['type'], $argument['name'], $argument['default']);
            } else {
                $argumentsList[] = sprintf('%s $%s', $argument['type'], $argument['name']);
            }
        }

        return implode(', ', $argumentsList);
    }

    protected function addQueryParams(array $arguments, array &$code): void
    {
        $amount = array_reduce($arguments, function ($amount, $argument) {
            return $argument['in'] == 'query' ? $amount+1 : $amount;
        });

        if ($amount == 0) {
            return;
        }

        $code[] = sprintf('            \'query\' => [', $in);

        foreach ($arguments as $argument) {
            if ($argument['in'] != 'query') {
                continue;
            }
            $code[] = sprintf('                \'%s\' => $%s,', $argument['paramName'], $argument['name']);
        }
        $code[] = '            ],';
    }

    protected function addBodyParam(array $arguments, array &$code): void
    {
        foreach ($arguments as $argument) {
            if ($argument['in'] != 'body') {
                continue;
            }

            $code[] = sprintf('            \'body\' => $%s,', $argument['name']);

            return;
        }
    }

    protected function getReturnType(array $responses): string
    {
        // TODO take into account that a resource could not be found
        if (isset($responses['200'])) {
            $ref = $responses['200']['schema']['$ref'];
        } elseif (isset($responses['202'])) {
            $ref = $responses['202']['schema']['$ref'];
        } else {
            throw new \Exception('Could not fit responseType');
        }

        return $this->getType($ref);
    }

    protected function shortPath($path): string
    {
        return substr($path, strlen('/retailer/'));
    }
}
